
// kind definitions
let IS_COND		= 0x00001
let IS_CONTROL  = 0x00002
let IS_CALL     = 0x00004
let IS_RETURN	= 0x00008
let IS_MEM		= 0x00010
let IS_LOAD		= 0x00020
let IS_STORE    = 0x00040
let IS_INT		= 0x00080
let IS_FLOAT	= 0x00100
let IS_ALU		= 0x00200
let IS_MUL		= 0x00400
let IS_DIV		= 0x00800
let IS_SHIFT	= 0x01000
let IS_TRAP		= 0x02000
let IS_INTERN	= 0x04000
let IS_MULTI	= 0x08000
let IS_SPECIAL	= 0x10000
let IS_INDIRECT = 0x10000
let IS_UNKNOWN	= 0x20000
let IS_ATOMIC	= 0x40000
let IS_BUNDLE	= 0x80000


// simple ALU
extend
	add, addi, sub,
	and, andi, or, ori, xor, xori,
	sll, slli, sra, srai, srl, srli,
	slt, sltu, slti, sltiu,
	lui, auipc,
	addiw, addw, subw,
	slliw, srliw, sraiw,
	sllw, srlw, sraw
		otawa_kind = IS_ALU | IS_INT

// integer division
extend
	div, divu,
	rem, remu,
	divw, divuw,
	remw, remuw
		otawa_kind = IS_ALU | IS_INT | IS_DIV

// integer multiplication
extend
	mul, mulh, mulhu, mulhsu,
	mulw
		otawa_kind = IS_ALU | IS_INT | IS_MUL

// inconditional branch and link
extend
	jal
		otawa_kind = IS_CONTROL | 
			(if dest == 0 then 0
			else if dest == 1 then IS_CALL
			else 0
			endif endif)

// indirect inconditional branch and link
extend
	jalr
		otawa_kind = IS_CONTROL |
			(if dest == 1 then IS_CALL | IS_INDIRECT
			else if dest == 0 && offset == 0 && base == 1 then IS_RETURN
			else if dest == 0 && offset == 0 && base != 1 then IS_INDIRECT
			else IS_CALL | IS_INDIRECT
			endif endif endif)


// simple conditional branch
extend
	beq, bne,
	blt, bltu,
	bge, bgeu
		otawa_kind = IS_CONTROL | IS_COND

// integer load
extend
	lb, lbu,
	lh, lhu,
	lw, lwu,
	ld
		otawa_kind = IS_MEM | IS_LOAD | IS_INT

// integer store
extend
	sb, sh, sw, sd
		otawa_kind = IS_MEM | IS_STORE | IS_INT

// Atomic Memory Operations
extend
	lr
		otawa_kind = 0x40000 | IS_LOAD

extend
	sc
		otawa_kind = 0x40000 | IS_STORE

extend
	amoswap, amoadd,
	amoxor, amoand, amoor,
	amomin, amomax,
	amominu, amomaxu
		otawa_kind = 0x40000

// floating point load
extend
	flw, fld
		otawa_kind = IS_MEM | IS_LOAD | IS_FLOAT

// floating point store
extend
	fsw, fsd
		otawa_kind = IS_MEM | IS_STORE | IS_FLOAT

// fp: add + mul + fused multiply-add
extend
	fadds, faddd,
	fsubs, fsubd,
	fmuls, fmuld,
	fmuladds, fmuladdd,
	fmulsubs, fmulsubd,
	fnegmuladds, fnegmuladdd,
	fnegmulsubs, fnegmulsubd
		otawa_kind = IS_MUL | IS_FLOAT

// fp: div (single precision)
extend
	fdivs
		otawa_kind = IS_DIV | IS_FLOAT

// fp: div (double precision)
extend
	fdivd
		otawa_kind = IS_DIV | IS_FLOAT | IS_SPECIAL

// fp: sqrt (single precision)
extend
	fsqrts
		otawa_kind = IS_SHIFT | IS_FLOAT

// fp: sqrt (double precision)
extend
	fsqrtd
		otawa_kind = IS_SHIFT | IS_FLOAT | IS_SPECIAL

// fp: minmax
extend
	fminmaxs, fminmaxd,
	fsgnjs, fsgnjd,
	fcmps, fcmpd,
	fclasss, fclassd
		otawa_kind = IS_FLOAT

// ftp: conversion
extend
	fcvts, fcvtd,
	fcvt2s, fcvt2d,
	fcvt3d, fmv, fmv2,
	fcvt3s, fcvt4s,
	fcvt4d, fcvt5d,
	fmv3, fmv4
		otawa_kind = IS_FLOAT | IS_INT

// internal instruction
extend
	fence
		otawa_kind = IS_INTERN

// control special instruction
extend
	ecall, ebreak
		otawa_kind = IS_CONTROL | IS_SPECIAL

// instructions for modifying and reading control status registers (CSR)
extend
	csrrw, csrrs, csrrc,
	csrrwi, csrrsi, csrrci
		otawa_kind = IS_TRAP

// RC/MC custom instructions
// remove these lines when not working with the RC/MC architecture
extend
	rcmc1
		otawa_kind = IS_ALU | IS_INT

extend
	rcmc2, rcmc3, rcmc4,
	rcmc5, rcmc6
		otawa_kind = IS_CONTROL | IS_COND
